{"ast":null,"code":"var _jsxFileName = \"C:\\\\projetos\\\\des-web\\\\app-example\\\\src\\\\pages\\\\market\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport NavigationBar from '../../components/navigationbar';\nimport StockCard from '../../components/stockcard';\nimport CandlestickChart from '../../components/candlestickchart';\nimport { generateStockData, updateStockPrices } from '../../utils/datatest';\nimport { Container, StockListContainer, ChartContainer } from './style';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Market() {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const user = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.user;\n  const [stocks, setStocks] = useState([]);\n  const [selectedStock, setSelectedStock] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    if (!user) {\n      navigate('/'); // Redirect to login if no user is found\n      return;\n    }\n    const initialData = generateStockData();\n    setStocks(initialData);\n    setSelectedStock(initialData[0]); // Select the first stock by default\n\n    // Simulate real-time updates\n    const interval = setInterval(() => {\n      setStocks(prevStocks => {\n        const updated = updateStockPrices(prevStocks);\n        // Update selected stock to reflect new price\n        if (selectedStock) {\n          setSelectedStock(updated.find(s => s.symbol === selectedStock.symbol));\n        }\n        return updated;\n      });\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [user, navigate, selectedStock]);\n  useEffect(() => {\n    if (selectedStock) {\n      // Simulate historical data for the chart\n      const generateHistoricalData = stockSymbol => {\n        const data = [];\n        let currentPrice = selectedStock.price;\n        for (let i = 0; i < 30; i++) {\n          // 30 data points for the last month\n          const open = currentPrice * (1 + (Math.random() - 0.5) * 0.02);\n          const close = currentPrice * (1 + (Math.random() - 0.5) * 0.02);\n          const high = Math.max(open, close) * (1 + Math.random() * 0.01);\n          const low = Math.min(open, close) * (1 - Math.random() * 0.01);\n          data.push({\n            time: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n            // Date string\n            open: parseFloat(open.toFixed(2)),\n            high: parseFloat(high.toFixed(2)),\n            low: parseFloat(low.toFixed(2)),\n            close: parseFloat(close.toFixed(2))\n          });\n          currentPrice = close; // Next day's price starts near today's close\n        }\n        return data;\n      };\n      setChartData(generateHistoricalData(selectedStock.symbol));\n    }\n  }, [selectedStock]);\n  const handleStockSelect = stock => {\n    setSelectedStock(stock);\n  };\n  const handleBuySell = (action, stock) => {\n    // Implement buy/sell logic here\n    // For now, just log to console\n    console.log(`${action} ${stock.symbol}`);\n    // In a real scenario, you would update localStorage for portfolio and history\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(StockListContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Cota\\xE7\\xF5es de Mercado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), stocks.map(stock => /*#__PURE__*/_jsxDEV(StockCard, {\n          stock: stock,\n          onSelect: handleStockSelect,\n          onBuySell: handleBuySell,\n          isSelected: selectedStock && selectedStock.symbol === stock.symbol\n        }, stock.symbol, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChartContainer, {\n        children: selectedStock ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Gr\\xE1fico de \", selectedStock.name, \" (\", selectedStock.symbol, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CandlestickChart, {\n            data: chartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Selecione uma a\\xE7\\xE3o para ver o gr\\xE1fico.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Market, \"9EpFCYPzVWDE+JhM/5yfUEEWmHE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Market;\nvar _c;\n$RefreshReg$(_c, \"Market\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","NavigationBar","StockCard","CandlestickChart","generateStockData","updateStockPrices","Container","StockListContainer","ChartContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","Market","_s","_location$state","navigate","location","user","state","stocks","setStocks","selectedStock","setSelectedStock","chartData","setChartData","initialData","interval","setInterval","prevStocks","updated","find","s","symbol","clearInterval","generateHistoricalData","stockSymbol","data","currentPrice","price","i","open","Math","random","close","high","max","low","min","push","time","Date","now","toISOString","split","parseFloat","toFixed","handleStockSelect","stock","handleBuySell","action","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onSelect","onBuySell","isSelected","name","_c","$RefreshReg$"],"sources":["C:/projetos/des-web/app-example/src/pages/market/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport NavigationBar from '../../components/navigationbar';\r\nimport StockCard from '../../components/stockcard';\r\nimport CandlestickChart from '../../components/candlestickchart';\r\nimport { generateStockData, updateStockPrices } from '../../utils/datatest';\r\nimport { Container, StockListContainer, ChartContainer } from './style';\r\n\r\nexport default function Market() {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const user = location.state?.user;\r\n\r\n    const [stocks, setStocks] = useState([]);\r\n    const [selectedStock, setSelectedStock] = useState(null);\r\n    const [chartData, setChartData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!user) {\r\n            navigate('/'); // Redirect to login if no user is found\r\n            return;\r\n        }\r\n\r\n        const initialData = generateStockData();\r\n        setStocks(initialData);\r\n        setSelectedStock(initialData[0]); // Select the first stock by default\r\n\r\n        // Simulate real-time updates\r\n        const interval = setInterval(() => {\r\n            setStocks(prevStocks => {\r\n                const updated = updateStockPrices(prevStocks);\r\n                // Update selected stock to reflect new price\r\n                if (selectedStock) {\r\n                    setSelectedStock(updated.find(s => s.symbol === selectedStock.symbol));\r\n                }\r\n                return updated;\r\n            });\r\n        }, 5000); // Update every 5 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }, [user, navigate, selectedStock]);\r\n\r\n    useEffect(() => {\r\n        if (selectedStock) {\r\n            // Simulate historical data for the chart\r\n            const generateHistoricalData = (stockSymbol) => {\r\n                const data = [];\r\n                let currentPrice = selectedStock.price;\r\n                for (let i = 0; i < 30; i++) { // 30 data points for the last month\r\n                    const open = currentPrice * (1 + (Math.random() - 0.5) * 0.02);\r\n                    const close = currentPrice * (1 + (Math.random() - 0.5) * 0.02);\r\n                    const high = Math.max(open, close) * (1 + Math.random() * 0.01);\r\n                    const low = Math.min(open, close) * (1 - Math.random() * 0.01);\r\n                    data.push({\r\n                        time: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // Date string\r\n                        open: parseFloat(open.toFixed(2)),\r\n                        high: parseFloat(high.toFixed(2)),\r\n                        low: parseFloat(low.toFixed(2)),\r\n                        close: parseFloat(close.toFixed(2)),\r\n                    });\r\n                    currentPrice = close; // Next day's price starts near today's close\r\n                }\r\n                return data;\r\n            };\r\n            setChartData(generateHistoricalData(selectedStock.symbol));\r\n        }\r\n    }, [selectedStock]);\r\n\r\n    const handleStockSelect = (stock) => {\r\n        setSelectedStock(stock);\r\n    };\r\n\r\n    const handleBuySell = (action, stock) => {\r\n        // Implement buy/sell logic here\r\n        // For now, just log to console\r\n        console.log(`${action} ${stock.symbol}`);\r\n        // In a real scenario, you would update localStorage for portfolio and history\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <NavigationBar />\r\n            <Container>\r\n                <StockListContainer>\r\n                    <h2>Cotações de Mercado</h2>\r\n                    {stocks.map(stock => (\r\n                        <StockCard\r\n                            key={stock.symbol}\r\n                            stock={stock}\r\n                            onSelect={handleStockSelect}\r\n                            onBuySell={handleBuySell}\r\n                            isSelected={selectedStock && selectedStock.symbol === stock.symbol}\r\n                        />\r\n                    ))}\r\n                </StockListContainer>\r\n                <ChartContainer>\r\n                    {selectedStock ? (\r\n                        <>\r\n                            <h2>Gráfico de {selectedStock.name} ({selectedStock.symbol})</h2>\r\n                            <CandlestickChart data={chartData} />\r\n                        </>\r\n                    ) : (\r\n                        <p>Selecione uma ação para ver o gráfico.</p>\r\n                    )}\r\n                </ChartContainer>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}